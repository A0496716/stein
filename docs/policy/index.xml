<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Policy Configuration on Stein Documentations</title>
    <link>https://b4b4r07.github.io/stein/policy/</link>
    <description>Recent content in Policy Configuration on Stein Documentations</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2017 15:26:15 +0000</lastBuildDate>
    
	<atom:link href="https://b4b4r07.github.io/stein/policy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rule Configuration</title>
      <link>https://b4b4r07.github.io/stein/policy/rules/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://b4b4r07.github.io/stein/policy/rules/</guid>
      <description>The most important thing you&amp;rsquo;ll configure with Stein are rules. Rules are a component of your policies. It might be some rule set such as a region to be deployed, naming convention, or some linting. Or it can be a higher level component such as an email provider, DNS record, or database provider.
This page assumes you&amp;rsquo;re familiar with the [configuration syntax]() already.
Example A rule configuration looks like the following:</description>
    </item>
    
    <item>
      <title>Variable Configuration</title>
      <link>https://b4b4r07.github.io/stein/policy/variables/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://b4b4r07.github.io/stein/policy/variables/</guid>
      <description>Input variables serve as parameters for a Terraform module.
When used in the root module of a configuration, variables can be set from CLI arguments and environment variables. For [child modules](), they allow values to pass from parent to child.
Input variable usage is introduced in the Getting Started guide section [Input Variables]().
This page assumes you&amp;rsquo;re familiar with the [configuration syntax]() already.
Example Input variables can be defined as follows:</description>
    </item>
    
    <item>
      <title>Function Configuration</title>
      <link>https://b4b4r07.github.io/stein/policy/functions/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://b4b4r07.github.io/stein/policy/functions/</guid>
      <description>It is recommended that you read the Custom Functions page prior to reading this section of the documentation. The page will explain what the custom functions are and how to use them. On the other hands, this documentation will guide you the basics of writing custom functions and introducing it into your policies efficiently.
Example A function configuration looks like the following:
function &amp;#34;get_service_name&amp;#34; { params = [file] result = basename(dirname(dirname(dirname(file)))) } function &amp;#34;get_env&amp;#34; { params = [file] result = basename(dirname(dirname(file))) } function &amp;#34;get_service_id_with_env&amp;#34; { params = [file] result = format(&amp;#34;%s-%s&amp;#34;, get_service_name(file), lookup(var.</description>
    </item>
    
    <item>
      <title>Config Configuration</title>
      <link>https://b4b4r07.github.io/stein/policy/config/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://b4b4r07.github.io/stein/policy/config/</guid>
      <description>The config is a block that can describe settings related to stein lint. Basically stein configuration is based on &amp;ldquo;Smart default&amp;rdquo; concept. It means that it has been set up sufficiently from the beginning. Moreover, this means that you can use it without having to define this block and no need to change the setting. However, depending on the item, you may want to customize it. Therefore, you can change the setting according to the config block accordingly.</description>
    </item>
    
    <item>
      <title>Load Order</title>
      <link>https://b4b4r07.github.io/stein/policy/load-order/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://b4b4r07.github.io/stein/policy/load-order/</guid>
      <description>How policies are loaded by stein To understand how stein loads policy files and recognizes them is very important for writing and applying policies to the files effectively. stein apply requires always one or more arguments only. It assumes the config file paths such as YAML, JSON and so on.
The path may have a hierarchical structure. In Stein, when a path with a hierarchical structure is given as arguments, stein recognizes the HCL file in .</description>
    </item>
    
  </channel>
</rss>